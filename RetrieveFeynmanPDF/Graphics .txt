Graphics 


Free Fall


import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from mpl_toolkits.mplot3d import Axes3D
from IPython.display import HTML

# Constants
g = 9.81 *10  # acceleration due to gravity (m/s^2)
t_max = 10.0  # total time of free fall (s)
dt = 0.005  # time step (s)

# Initial conditions
x0, y0, z0 = 5, 5, 100  # initial position (m)
vx0, vy0, vz0 = 0, 0, 0  # initial velocity (m/s)

# Time array
t = np.arange(0, t_max, dt)

# Position arrays
x = x0 + vx0 * t
y = y0 + vy0 * t
z = z0 + vz0 * t - 0.5 * g * t**2

# Create the figure and the 3D axis
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Set the axes limits
ax.set_xlim(0, 10)
ax.set_ylim(0, 10)
ax.set_zlim(0, 100)

# Set the labels
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

# Create a point in 3D space with a bigger size
point, = ax.plot([], [], [], 'bo', markersize=10)

# Create a shadow
shadow, = ax.plot([], [], 'k--', linewidth=1)

# Initialization function
def init():
    point.set_data([], [])
    point.set_3d_properties([])
    shadow.set_data([], [])
    return point, shadow

# Animation function
def animate(i):
    point.set_data(x[i], y[i])
    point.set_3d_properties(z[i])
    
    # Update shadow
    shadow.set_data(x[:i], y[:i])
    return point, shadow

# Create the animation
ani = FuncAnimation(fig, animate, frames=len(t), init_func=init, blit=True, interval=10)

# Display the animation
HTML(ani.to_jshtml())

First Newton law

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from mpl_toolkits.mplot3d import Axes3D
from IPython.display import HTML

# Constants
t_max = 10.0  # total time of motion (s)
dt = 0.1  # time step (s)
v = 1.0  # constant velocity (m/s)

# Initial conditions
x0, y0, z0 = 0, 0, 0  # initial position (m)
vx, vy, vz = 1, 1, 0.5  # constant velocity components (m/s)

# Time array
t = np.arange(0, t_max, dt)

# Position arrays
x = x0 + vx * t
y = y0 + vy * t
z = z0 + vz * t

# Create the figure and the 3D axis
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Set the axes limits
ax.set_xlim(0, t_max * vx)
ax.set_ylim(0, t_max * vy)
ax.set_zlim(0, t_max * vz)

# Set the labels
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

# Create a point in 3D space with a bigger size
point, = ax.plot([], [], [], 'bo', markersize=10)

# Create a shadow
shadow, = ax.plot([], [], 'k--', linewidth=1)

# Initialization function
def init():
    point.set_data([], [])
    point.set_3d_properties([])
    shadow.set_data([], [])
    return point, shadow

# Animation function
def animate(i):
    point.set_data(x[i], y[i])
    point.set_3d_properties(z[i])
    
    # Update shadow
    shadow.set_data(x[:i], y[:i])
    return point, shadow

# Create the animation
ani = FuncAnimation(fig, animate, frames=len(t), init_func=init, blit=True, interval=100)

# Display the animation
HTML(ani.to_jshtml())

SECOND NEWTON LAW


import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from mpl_toolkits.mplot3d import Axes3D
from IPython.display import HTML

# Constants
m1, m2, m3 = 1.0, 2.0, 3.0  # masses (kg)
F1, F2, F3 = 1.0, 5.0, 10.0  # constant forces (N)
a1, a2, a3 = F1 / m1, F2 / m2, F3 / m3  # accelerations (m/s^2)
t_max = 10.0  # total time of motion (s)
dt = 0.1  # time step (s)

# Initial conditions
x0_1, y0_1, z0_1 = 0, 0, 0  # initial position of object 1 (m)
x0_2, y0_2, z0_2 = 0, 0, 10  # initial position of object 2 (m)
x0_3, y0_3, z0_3 = 0, 0, 20  # initial position of object 3 (m)

vx0, vy0, vz0 = 0, 0, 0  # initial velocities (m/s)

# Time array
t = np.arange(0, t_max, dt)

# Position arrays
x1 = x0_1 + vx0 * t + 0.5 * a1 * t**2
y1 = y0_1 + vy0 * t + 0.5 * a1 * t**2
z1 = z0_1 + vz0 * t + 0.5 * a1 * t**2

x2 = x0_2 + vx0 * t + 0.5 * a2 * t**2
y2 = y0_2 + vy0 * t + 0.5 * a2 * t**2
z2 = z0_2 + vz0 * t + 0.5 * a2 * t**2

x3 = x0_3 + vx0 * t + 0.5 * a3 * t**2
y3 = y0_3 + vy0 * t + 0.5 * a3 * t**2
z3 = z0_3 + vz0 * t + 0.5 * a3 * t**2

# Create the figure and the 3D axis
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Set the axes limits
ax.set_xlim(0, max(x1[-1], x2[-1], x3[-1]))
ax.set_ylim(0, max(y1[-1], y2[-1], y3[-1]))
ax.set_zlim(0, max(z1[-1], z2[-1], z3[-1]) + 20)

# Set the labels
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

# Create points in 3D space
point1, = ax.plot([], [], [], 'bo', markersize=10, label='Object 1')
point2, = ax.plot([], [], [], 'ro', markersize=10, label='Object 2')
point3, = ax.plot([], [], [], 'go', markersize=10, label='Object 3')

# Create shadows
shadow1, = ax.plot([], [], 'b--', linewidth=1)
shadow2, = ax.plot([], [], 'r--', linewidth=1)
shadow3, = ax.plot([], [], 'g--', linewidth=1)

# Add legend
ax.legend()

# Initialization function
def init():
    point1.set_data([], [])
    point1.set_3d_properties([])
    shadow1.set_data([], [])

    point2.set_data([], [])
    point2.set_3d_properties([])
    shadow2.set_data([], [])

    point3.set_data([], [])
    point3.set_3d_properties([])
    shadow3.set_data([], [])

    return point1, shadow1, point2, shadow2, point3, shadow3

# Animation function
def animate(i):
    point1.set_data(x1[i], y1[i])
    point1.set_3d_properties(z1[i])
    shadow1.set_data(x1[:i], y1[:i])

    point2.set_data(x2[i], y2[i])
    point2.set_3d_properties(z2[i])
    shadow2.set_data(x2[:i], y2[:i])

    point3.set_data(x3[i], y3[i])
    point3.set_3d_properties(z3[i])
    shadow3.set_data(x3[:i], y3[:i])

    return point1, shadow1, point2, shadow2, point3, shadow3

# Create the animation
ani = FuncAnimation(fig, animate, frames=len(t), init_func=init, blit=True, interval=100)

# Display the animation
HTML(ani.to_jshtml())

